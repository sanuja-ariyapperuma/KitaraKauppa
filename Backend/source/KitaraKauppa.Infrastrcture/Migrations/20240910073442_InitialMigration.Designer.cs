// <auto-generated />
using System;
using KitaraKauppa.Infrastrcture.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KitaraKauppa.Infrastrcture.Migrations
{
    [DbContext(typeof(KitaraKauppaDbContext))]
    [Migration("20240910073442_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.Property<Guid>("ColorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("colors_id");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("products_id");

                    b.HasKey("ColorsId", "ProductsId")
                        .HasName("pk_color_product");

                    b.HasIndex("ProductsId")
                        .HasDatabaseName("ix_color_product_products_id");

                    b.ToTable("color_product", (string)null);

                    b.HasData(
                        new
                        {
                            ColorsId = new Guid("32c1c9ba-bcfb-41bd-a1d5-12def60bc714"),
                            ProductsId = new Guid("25435b04-9a85-4577-be4b-8816c287810c")
                        },
                        new
                        {
                            ColorsId = new Guid("214ee9ef-c53a-4021-8378-fcbd67ab0cf0"),
                            ProductsId = new Guid("25435b04-9a85-4577-be4b-8816c287810c")
                        },
                        new
                        {
                            ColorsId = new Guid("214ee9ef-c53a-4021-8378-fcbd67ab0cf0"),
                            ProductsId = new Guid("275b7cb3-df3d-4d11-bbc1-c0664e270f25")
                        },
                        new
                        {
                            ColorsId = new Guid("5ac0cc75-623b-4968-a4f7-aeb38100077a"),
                            ProductsId = new Guid("275b7cb3-df3d-4d11-bbc1-c0664e270f25")
                        },
                        new
                        {
                            ColorsId = new Guid("5ac0cc75-623b-4968-a4f7-aeb38100077a"),
                            ProductsId = new Guid("6e7fe926-0695-4b92-9e5d-f26fb0bfdead")
                        },
                        new
                        {
                            ColorsId = new Guid("85e730db-f1a1-47a8-b8c7-ffe52f1a511e"),
                            ProductsId = new Guid("6e7fe926-0695-4b92-9e5d-f26fb0bfdead")
                        },
                        new
                        {
                            ColorsId = new Guid("85e730db-f1a1-47a8-b8c7-ffe52f1a511e"),
                            ProductsId = new Guid("bb5abee4-5507-48c6-a82d-e432967c5141")
                        },
                        new
                        {
                            ColorsId = new Guid("32c1c9ba-bcfb-41bd-a1d5-12def60bc714"),
                            ProductsId = new Guid("bb5abee4-5507-48c6-a82d-e432967c5141")
                        },
                        new
                        {
                            ColorsId = new Guid("d66fd662-8176-4b20-bbb1-0b4844a271d1"),
                            ProductsId = new Guid("e8df56e4-d3b6-4587-9102-160651f476f8")
                        },
                        new
                        {
                            ColorsId = new Guid("7fdc99fb-0738-4eab-9692-93b3848a4f10"),
                            ProductsId = new Guid("e8df56e4-d3b6-4587-9102-160651f476f8")
                        },
                        new
                        {
                            ColorsId = new Guid("7fdc99fb-0738-4eab-9692-93b3848a4f10"),
                            ProductsId = new Guid("1edf02b3-9dd3-4625-aebc-326badf35cbc")
                        },
                        new
                        {
                            ColorsId = new Guid("5ac0cc75-623b-4968-a4f7-aeb38100077a"),
                            ProductsId = new Guid("1edf02b3-9dd3-4625-aebc-326badf35cbc")
                        },
                        new
                        {
                            ColorsId = new Guid("32c1c9ba-bcfb-41bd-a1d5-12def60bc714"),
                            ProductsId = new Guid("d81feab3-b560-44e6-b31b-704e08f5a591")
                        },
                        new
                        {
                            ColorsId = new Guid("214ee9ef-c53a-4021-8378-fcbd67ab0cf0"),
                            ProductsId = new Guid("d81feab3-b560-44e6-b31b-704e08f5a591")
                        },
                        new
                        {
                            ColorsId = new Guid("214ee9ef-c53a-4021-8378-fcbd67ab0cf0"),
                            ProductsId = new Guid("a73368de-2bb9-4a1a-a08f-5b451f7a5515")
                        },
                        new
                        {
                            ColorsId = new Guid("5ac0cc75-623b-4968-a4f7-aeb38100077a"),
                            ProductsId = new Guid("a73368de-2bb9-4a1a-a08f-5b451f7a5515")
                        });
                });

            modelBuilder.Entity("ImageProduct", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("images_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("ImagesId", "ProductId")
                        .HasName("pk_image_product");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_image_product_product_id");

                    b.ToTable("image_product", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_orders_address_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("orientation");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Units")
                        .HasColumnType("integer")
                        .HasColumnName("units");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_order_items_color_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_items_product_id");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasCheckConstraint("CK_OrderItem_Units", "\"units\" > 0");
                        });
                });

            modelBuilder.Entity("KitaraKauppa.Core.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d38c4b9e-b13b-4aee-ad44-dd55db7e3919"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Fender",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8996e7b6-755c-4cf8-8512-294c7916bdd4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Gibson",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("81a253d0-a07c-4cd5-a838-a200279cba3f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ibanez",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d95ee07d-f51a-4322-b4ce-b1bdbf4443cb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Martin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7e95231a-ed06-440a-b561-d8c2d8d2f97e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "PRS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53479238-506e-4abd-940c-449bddb101fa"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Sigma",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4a02d3b7-c66d-4510-9ab5-191800cc3d49"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Takamine",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("74074506-e224-4d37-8286-308958a125cd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Yamaha",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KitaraKauppa.Core.Products.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_colors");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32c1c9ba-bcfb-41bd-a1d5-12def60bc714"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Black",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("214ee9ef-c53a-4021-8378-fcbd67ab0cf0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "White",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5ac0cc75-623b-4968-a4f7-aeb38100077a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Red",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("85e730db-f1a1-47a8-b8c7-ffe52f1a511e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Green",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d66fd662-8176-4b20-bbb1-0b4844a271d1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Blue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7fdc99fb-0738-4eab-9692-93b3848a4f10"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Yellow",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KitaraKauppa.Core.Products.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extention");

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_alt");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("orientation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VarientType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("varient_type");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_products_brand_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("25435b04-9a85-4577-be4b-8816c287810c"),
                            BrandId = new Guid("d38c4b9e-b13b-4aee-ad44-dd55db7e3919"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2637),
                            Description = "The Fender Stratocaster is a model of electric guitar designed from 1952 into 1954 by Leo Fender, Bill Carson, George Fullerton and Freddie Tavares. The Fender Musical Instruments Corporation has continuously manufactured the Stratocaster from 1954 to the present. It is a double-cutaway guitar, with an extended top horn shape for balance. Along with the Gibson Les Paul and Fender Telecaster, it is one of the most-often emulated electric guitar shapes.",
                            IsDeleted = false,
                            Orientation = "RightHanded",
                            Title = "Fender Stratocaster",
                            UnitPrice = 1000m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2639),
                            VarientType = "Electric"
                        },
                        new
                        {
                            Id = new Guid("275b7cb3-df3d-4d11-bbc1-c0664e270f25"),
                            BrandId = new Guid("8996e7b6-755c-4cf8-8512-294c7916bdd4"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2647),
                            Description = "The Gibson Les Paul is a solid body electric guitar that was first sold by the Gibson Guitar Corporation in 1952. The Les Paul was designed by Gibson president Ted McCarty, factory manager John Huis and their team with input from and endorsement by guitarist Les Paul. Its design typically comprises a solid mahogany body with a carved maple top and a single cutaway, a mahogany set-in neck with a rosewood fretboard, two pickups with independent volume and tone controls, and a stoptail bridge, although variants exist.",
                            IsDeleted = false,
                            Orientation = "LeftHanded",
                            Title = "Gibson Les Paul",
                            UnitPrice = 1500m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2648),
                            VarientType = "Electric"
                        },
                        new
                        {
                            Id = new Guid("6e7fe926-0695-4b92-9e5d-f26fb0bfdead"),
                            BrandId = new Guid("81a253d0-a07c-4cd5-a838-a200279cba3f"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2652),
                            Description = "The Ibanez RG is a series of electric guitars produced by Hoshino Gakki and one of the best-selling superstrat-style hard rock/heavy metal guitars ever made. The first in the series, RG550, was originally released in 1987 and advertised as part of the Roadstar series. The RG series is a line of solid body electric guitars produced by Hoshino Gakki and sold under the Ibanez brand. The series was introduced in 1987 as the Roadstar (RG) series and expanded in 1992.",
                            IsDeleted = false,
                            Orientation = "BothOptions",
                            Title = "Ibanez RG",
                            UnitPrice = 800m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2652),
                            VarientType = "Electric"
                        },
                        new
                        {
                            Id = new Guid("bb5abee4-5507-48c6-a82d-e432967c5141"),
                            BrandId = new Guid("d95ee07d-f51a-4322-b4ce-b1bdbf4443cb"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2656),
                            Description = "The Martin D-28 is a dreadnought-style acoustic guitar made by C. F. Martin & Company of Nazareth, Pennsylvania. It is widely regarded as the instrument that set the standard for the dreadnought guitar style. The D-28 is the standard by which many steel-string guitars are measured and is often used as a reference for the sound of acoustic guitars.",
                            IsDeleted = false,
                            Orientation = "RightHanded",
                            Title = "Martin D-28",
                            UnitPrice = 2000m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2657),
                            VarientType = "Accoustic"
                        },
                        new
                        {
                            Id = new Guid("e8df56e4-d3b6-4587-9102-160651f476f8"),
                            BrandId = new Guid("7e95231a-ed06-440a-b561-d8c2d8d2f97e"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2660),
                            Description = "The PRS Custom 24 is the original PRS—the guitar Paul Reed Smith took to his first tradeshow in 1985. A perennial favorite with musicians, this model features a patented PRS tremolo system, PRS Phase III locking tuners, and a pair of humbucking pickups. The Custom 24 is the original PRS. Since its introduction, it has offered a unique tonal option for serious players and defined PRS tone and playability.",
                            IsDeleted = false,
                            Orientation = "LeftHanded",
                            Title = "PRS Custom 24",
                            UnitPrice = 2500m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2661),
                            VarientType = "Electric"
                        },
                        new
                        {
                            Id = new Guid("1edf02b3-9dd3-4625-aebc-326badf35cbc"),
                            BrandId = new Guid("53479238-506e-4abd-940c-449bddb101fa"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2664),
                            Description = "The Sigma 000M-15 is a 000 body size acoustic guitar with a solid mahogany top, back and sides. The 000M-15 is a 000 body size acoustic guitar with a solid mahogany top, back and sides. The 000M-15 is a 000 body size acoustic guitar with a solid mahogany top, back and sides.",
                            IsDeleted = false,
                            Orientation = "BothOptions",
                            Title = "Sigma 000M-15",
                            UnitPrice = 500m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2665),
                            VarientType = "Accoustic"
                        },
                        new
                        {
                            Id = new Guid("d81feab3-b560-44e6-b31b-704e08f5a591"),
                            BrandId = new Guid("4a02d3b7-c66d-4510-9ab5-191800cc3d49"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2669),
                            Description = "The Takamine GD20-NS is a dreadnought acoustic guitar with a solid cedar top and mahogany back and sides. The GD20-NS is a dreadnought acoustic guitar with a solid cedar top and mahogany back and sides. The GD20-NS is a dreadnought acoustic guitar with a solid cedar top and mahogany back and sides.",
                            IsDeleted = false,
                            Orientation = "RightHanded",
                            Title = "Takamine GD20-NS",
                            UnitPrice = 600m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2669),
                            VarientType = "Accoustic"
                        },
                        new
                        {
                            Id = new Guid("a73368de-2bb9-4a1a-a08f-5b451f7a5515"),
                            BrandId = new Guid("74074506-e224-4d37-8286-308958a125cd"),
                            CreatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2673),
                            Description = "The Yamaha FG800 is a dreadnought acoustic guitar with a solid spruce top and nato back and sides. The FG800 is a dreadnought acoustic guitar with a solid spruce top and nato back and sides. The FG800 is a dreadnought acoustic guitar with a solid spruce top and nato back and sides.",
                            IsDeleted = false,
                            Orientation = "LeftHanded",
                            Title = "Yamaha FG800",
                            UnitPrice = 400m,
                            UpdatedAt = new DateTime(2024, 9, 10, 7, 34, 42, 47, DateTimeKind.Utc).AddTicks(2673),
                            VarientType = "Accoustic"
                        });
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f819ac4-52a1-4c27-ad03-3ba21159e85a"),
                            CityName = "Helsinki",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0dfb4d4e-f694-4101-b0e6-e04c73c40584"),
                            CityName = "Espoo",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99950502-4beb-45a0-ab95-5285f0e9a517"),
                            CityName = "Vantaa",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ac0a350a-fdff-46d0-9839-e2057a81d62a"),
                            CityName = "Tampere",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b423dcc6-00d2-4a9a-871d-e8900fd48c97"),
                            CityName = "Turku",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("62046a0d-177f-4611-869b-cc14ff44ecef"),
                            CityName = "Oulu",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsUserActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_active");

                    b.Property<DateTime?>("LastLogin")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address_line2");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_addresses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_user_addresses_city_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_addresses_user_id");

                    b.ToTable("user_addresses", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserContactNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_contact_numbers");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_contact_numbers_user_id");

                    b.ToTable("user_contact_numbers", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user_credentials");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_credentials_user_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_credentials_user_name");

                    b.ToTable("user_credentials", (string)null);
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2a1c420-c068-48b5-854c-ffb247904891"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("e08e5d7f-8d13-4e07-8ed0-29268b1a59d8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleName = "Customer"
                        });
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Products.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_color_product_colors_colors_id");

                    b.HasOne("KitaraKauppa.Core.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_color_product_products_products_id");
                });

            modelBuilder.Entity("ImageProduct", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Products.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_images_images_id");

                    b.HasOne("KitaraKauppa.Core.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_product_products_product_id");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Orders.Order", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Users.UserAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_orders_user_addresses_address_id");

                    b.HasOne("KitaraKauppa.Core.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Orders.OrderItem", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Products.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_colors_color_id");

                    b.HasOne("KitaraKauppa.Core.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("KitaraKauppa.Core.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.Navigation("Color");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Products.Product", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Products.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_brands_brand_id");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.User", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Users.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_roles_user_role_id");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserAddress", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Users.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_addresses_cities_city_id");

                    b.HasOne("KitaraKauppa.Core.Users.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_addresses_users_user_id");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserContactNumber", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Users.User", "User")
                        .WithMany("UserContactNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_contact_numbers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserCredential", b =>
                {
                    b.HasOne("KitaraKauppa.Core.Users.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("KitaraKauppa.Core.Users.UserCredential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_credentials_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserContactNumbers");

                    b.Navigation("UserCredential")
                        .IsRequired();
                });

            modelBuilder.Entity("KitaraKauppa.Core.Users.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
